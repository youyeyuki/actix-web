initSidebarItems({"enum":[["ActorState","Actor execution state"],["MailboxError","Set of error that can occurred during message delivery process"]],"mod":[["dev","The `actix` prelude for library developers"],["fut","Custom `Future` implementation with `Actix` support"],["io",""],["msgs","Actix system messages"]],"struct":[["Addr","Address of the actor"],["Condition",""],["MessageResult","Helper type that implements `MessageResponse` trait"],["Recipient","`Recipient` type allows to send one specific message to an actor."],["Request","`Request` is a `Future` which represents asynchronous message sending process."],["Response","Helper type for representing different type of message responses"],["SpawnHandle","Spawned future handle. Could be used for cancelling spawned future."],["Supervisor","Actor supervisor"],["SyncArbiter","Sync arbiter"],["SyncContext","Sync actor execution context"],["System","System is an actor which manages runtime."]],"trait":[["Actor","Actors are objects which encapsulate state and behavior."],["ActorContext","Actor execution context"],["ActorFuture","Trait for types which are a placeholder of a value that may become available at some later point in time."],["AsyncContext","Asynchronous execution context"],["ContextFutureSpawner","Helper trait which can spawn future into actor's context"],["Handler","Message handler"],["StreamHandler","Stream handler"],["Supervised","Actors with ability to restart after failure"],["SystemService","Trait defines system's service."],["WrapStream","Helper trait that allows conversion of normal stream into `ActorStream`"]],"type":[["ResponseFuture","A specialized future for async message handler"]]});